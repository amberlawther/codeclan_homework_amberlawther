library(RPostgreSQL)
keyring_unlock(keyring = "local")
library(RPostgreSQL)
library(keyring)
keyring_unlock(keyring = "local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock(keyring = "local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock(keyring = "local")
rm(username)
rm(password)
my_db_connection <- dbConnect(drv = PostgreSQL(max.con = 1), user = username, password = password, dbname="acme_employees", host="localhost")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock(keyring = "local")
my_db_connection <- dbConnect(drv = PostgreSQL(max.con = 1), user = username, password = password, dbname="acme_employees", host="localhost")
rm(username)
rm(password)
View(my_db_connection)
dbListTables(conn = my_db_connection)
dbListFields(conn = my_db_connection, name = "acme_emplyees")
dbListFields(conn = my_db_connection, name = "employees")
dbListFields(conn = my_db_connection, name = "teams")
dbListFields(conn = my_db_connection, name = "feedbacks")
dbGetQuery(my_db_connection
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM acme_employees")
dbGetQuery(my_db_connection,
"SELECT * FROM teams")
dbGetQuery(my_db_connection,
"SELECT id, first_name, last_name,
CONCAT(first_name, " ", last_name) AS full_name
FROM employees")
dbGetQuery(my_db_connection,
"SELECT id, first_name, last_name,
CONCAT(first_name, ' ', last_name) AS full_name
FROM employees")
dbGetQuery(my_db_connection,
"SELECT * FROM teams")
dbGetQuery(my_db_connection,
"SELECT e.*, t.name AS team_name FROM employees
INNER JOIN teams ON e.team_id")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
INNER JOIN teams ON e.team_id AS team_name")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
INNER JOIN teams ON team_id AS team_name")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
INNER JOIN teams ON team_id = team_name")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
INNER JOIN teams ON team_id = id")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
INNER JOIN teams ON team_id")
dbGetQuery(my_db_connection,
"SELECT * FROM employees
INNER JOIN teams ON team_id = id")
dbGetQuery(my_db_connection,
"SELECT * FROM employees AS e
INNER JOIN teams AS t ON e.team_id = t.id")
dbGetQuery(my_db_connection,
"SELECT employees.*, teams.name AS team_name FROM employees AS e
INNER JOIN teams AS t ON e.team_id = t.id")
dbGetQuery(my_db_connection,
"SELECT e.*, t.name AS team_name FROM employees AS e
INNER JOIN teams AS t ON e.team_id = t.id")
dbGetQuery(my_db_connection,
"SELECT e.id, e.first_name, e.last_name, e.email, t.name AS team_name FROM employees AS e
INNER JOIN teams AS t ON e.team_id = t.id")
dbGetQuery(my_db_connection,
"SELECT t.name AS team_name, COUNT(e.id) AS num_employees
FROM employees AS e INNER JOIN teams as t
ON e.team_id = t.id
ORDER BY e.d DESC
GROUP BY team_name")
dbGetQuery(my_db_connection,
"SELECT t.name AS team_name, COUNT(e.id) AS num_employees
FROM employees AS e INNER JOIN teams as t
ON e.team_id = t.id
ORDER BY e.id DESC
GROUP BY team_name")
dbGetQuery(my_db_connection,
"SELECT t.name AS team_name, COUNT(e.id) AS num_employees
FROM employees AS e LEFT JOIN teams as t
ON e.team_id = t.id
ORDER BY e.id DESC
GROUP BY team_name")
dbGetQuery(my_db_connection,
"SELECT t.name AS team_name, COUNT(e.id) AS num_employees
FROM employees AS e LEFT JOIN teams as t
ON e.team_id = t.id
ORDER BY e.id DESC")
dbGetQuery(my_db_connection,
"SELECT t.name AS team_name, COUNT(e.id) AS num_employees
FROM employees AS e LEFT JOIN teams as t
ON e.team_id = t.id
GROUP BY team_name
ORDER BY e.id DESC")
dbGetQuery(my_db_connection,
"SELECT t.name AS team_name, COUNT(e.id) AS num_employees
FROM employees AS e LEFT JOIN teams as t
ON e.team_id = t.id")
dbGetQuery(my_db_connection,
"SELECT COUNT(e.id) AS num_employees, t.name AS team_name,
FROM employees AS e LEFT JOIN teams AS t
ON e.team_id = t.id")
dbGetQuery(my_db_connection,
"SELECT COUNT(e.id) AS num_employees, t.name AS team_name,
FROM teams AS t RIGHT JOIN employees AS e
ON t.team_id = e.id")
dbGetQuery(my_db_connection,
"SELECT COUNT(e.id) AS num_employees, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id
ORDER BY e.id DESC
GROUP BY team_name")
dbGetQuery(my_db_connection,
"SELECT COUNT(e.id) AS num_employees, t.name AS team_name
FROM employees AS e LEFT JOIN teams AS t
ON e.team_id = t.id
ORDER BY e.id DESC
GROUP BY team_name")
dbDisconnect(my_db_connection)
library(httr)
library(jsonlite)
library(purrr)
library(keyring)
keyring_unlock("remote")
keyring_unlock("remote_api2")
keyring_unlock("remote_api2")
key_set("indico_api_key")
keyring_lock("remote_api2")
keyring_unlock("remote_api2")
key_get("indico_api_key")
keyring_lock("remote_api2")
library(httr)
library(jsonlite)
library(purrr)
library(keyring)
keyring_unlock("remote_api2")
key_set("indico_api_key")
keyring_lock("remote_api2")
keyring_unlock("remote_api2")
key_get("indico_api_key")
keyring_lock("remote_api2")
keyring_unlock("remote_api2")
key_get("indico_api_key")
keyring_unlock("remote_api2")
key_set("indico_api_key")
keyring_lock("remote_api2")
keyring_unlock("remote_api2")
key_get("indico_api_key")
keyring_lock("remote_api2")
GET("https://apiv2.indico.io/emotion")
get_emotions_from_indico_api <- function(emotions) {
indicoio.sentiment <- list(ApiKey = indico_api_key, import indicoio = "I really like working here, great place ,decent perks!"
get_emotions_from_indico_api <- function(emotions) {
query_params <- list(ApiKey = indico_api_key, data = "I really like working here, great place, decent perks!")
response <- GET("https://apiv2.indico.io/sentiment", query = query_params)
content(response)
}
response
get_emotions_from_indico_api
query_params
content(response)
get_emotions_from_indico_api <- function(emotions) {
query_params <- list(ApiKey = indico_api_key, data = "I really like working here, great place, decent perks!")
response <- GET("https://apiv2.indico.io/emotion", query = query_params)
content(response)
get_emotions_from_indico_api2 <- function(emotions) {
query_params <- list(ApiKey = indico_api_key, data = "I really like working here, great place, decent perks!")
response <- GET("https://apiv2.indico.io/emotion", query = query_params)
content(response)
}
content(response)
content(response)
response <- GET("https://apiv2.indico.io/emotion", query = query_params)
dbGetQuery(my_db_connection,
"SELECT COUNT(e.id) AS num_employees, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id
ORDER BY e.id DESC
GROUP BY team_name")
keyring_unlock(keyring = "local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock(keyring = "local")
my_db_connection <- dbConnect(drv = PostgreSQL(max.con = 1), user = username, password = password, dbname="acme_employees", host="localhost")
rm(username)
rm(password)
dbGetQuery(my_db_connection,
"SELECT COUNT(e.id) AS num_employees, t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id
ORDER BY e.id DESC
GROUP BY team_name")
dbDisconnect(my_db_connection)
